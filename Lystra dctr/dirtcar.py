import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import models, transforms
from PIL import Image

# üîπ –ö–ª–∞—Å—Å—ã (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏!)
class_names = ["clean", "dirty", "slightly dirty", "super clean", "super dirty"]

# üîπ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = models.resnet50(weights=None)
model.fc = nn.Linear(model.fc.in_features, len(class_names))
model.load_state_dict(torch.load("resnet50_dirtycar.pth", map_location=device))
model = model.to(device)
model.eval()

# üîπ –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
def predict(image_path):
    img = Image.open(image_path).convert("RGB")
    img_tensor = transform(img).unsqueeze(0).to(device)

    with torch.no_grad():
        outputs = model(img_tensor)
        probs = F.softmax(outputs, dim=1)  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        conf, pred = torch.max(probs, 1)

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏ –≤—Å–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    result = {
        "predicted": class_names[pred.item()],
        "confidence": round(conf.item() * 100, 2),
        "all_classes": {class_names[i]: round(probs[0][i].item() * 100, 2) for i in range(len(class_names))}
    }
    return result

# üîπ –¢–µ—Å—Ç
res = predict(input("–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä test.jpg: "))
print("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:", res["predicted"])
print("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:", res["confidence"], "%")
print("–í—Å–µ –∫–ª–∞—Å—Å—ã:", res["all_classes"])
